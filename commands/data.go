// Code generated by go-bindata.
// sources:
// project_template/contracts/ERC20Token.sol
// project_template/contracts/Token.sol
// project_template/contracts/token_test.go
// project_template/deploy.yml
// DO NOT EDIT!

package commands

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsErc20tokenSol = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x55\xcd\x6b\xdb\x4e\x10\xbd\xfb\xaf\x98\x63\x1c\x82\x15\x0c\xbf\xdf\x21\xb9\x34\x94\x14\x7a\x6a\x69\x0d\x3d\xda\xab\xf5\x58\x5a\xba\xda\x15\xfb\x11\x35\x94\xfe\xef\x9d\xfd\xd0\x47\x24\x27\x2d\xa1\x3d\x34\x08\x62\x56\x33\x6f\xde\xbc\x37\x3b\x2a\x0a\xb8\x2b\xad\x33\x8c\x3b\xe0\x5a\xa5\x1f\x27\x6d\xc0\xd5\x08\x27\x2f\x25\xdc\x7f\x7a\x0b\xdb\x6b\xd8\xe9\xaf\xa8\xc0\x3a\xa6\x8e\xcc\x1c\x57\x94\x57\x3b\xd7\xda\x9b\xa2\xa8\x84\xab\x7d\xb9\xe1\xba\x29\x90\xb2\x0c\xfa\xa6\xb8\x7f\xff\xd1\x16\xc2\x5a\x8f\xb6\xd8\x5e\xaf\x56\x03\x34\xa1\x6d\xaf\x13\xd6\xf7\x15\xd0\x5f\x71\x09\xbb\x5a\x58\xa0\x87\x81\x95\xa2\xaa\x89\x48\xcd\x54\x85\xe0\x74\x64\x11\x53\xa0\x64\x16\x87\xf2\x9b\x98\x7a\xf2\x8a\x3b\xa1\x15\x05\x3a\x26\x3f\xfb\xb6\x95\x8f\x17\xeb\xd0\x46\x88\x73\x60\xd0\x79\xa3\x2c\x5c\x78\xa1\xdc\xf6\xbf\xff\xc1\xc6\x90\xf5\x6d\xcc\xa6\x82\x06\x5b\xc9\x38\x1e\xa1\xa3\x16\x6e\xe2\x69\x1f\xda\xfa\x52\x0a\x3e\x45\x4e\x59\x91\x2b\xf3\x4e\x37\xcc\x09\xce\xa4\x7c\x04\x6e\x90\x39\x0c\xf4\x2b\x74\x0e\xcd\xc8\xab\xd7\x71\x82\xb2\x19\x51\xe8\x69\xf4\x03\x55\xcf\x7d\xc6\x0e\x07\xa1\xac\x50\x1c\x7b\x1a\x33\x60\xaa\x65\x10\x94\x76\x11\x8c\x7b\x63\x50\x39\x62\x62\x90\xeb\x4a\x09\x4b\x98\x8c\x62\x14\x88\xa6\x95\xd8\xd0\x4b\x16\xf9\xe8\x53\x2c\x44\xd4\x79\x2d\x54\x05\x2c\x3b\xff\x54\xcd\xf2\x31\x46\x91\x9f\xad\x90\x68\x12\xe3\xcb\x22\xb9\x45\xbe\xc7\x6e\x80\x35\xda\x93\xc6\x01\x32\xb8\x69\x7f\xa9\xde\x90\xff\xa6\x65\x86\x35\xb0\xd7\x9d\xa2\x9e\x76\x54\x8a\x1d\x8f\x06\xad\x85\x93\xd1\x0d\x74\xb5\xe0\x75\x16\x44\xb2\x20\x42\x27\x68\x0c\x4b\x0c\x7e\x1a\x81\xa4\xd8\x08\x95\x2c\x8e\x20\x39\x7a\xd6\x4b\x3a\xfc\x70\xba\xe8\x6b\xa4\xb2\x2f\x4d\x49\xce\x59\x4f\x29\x93\xd6\x82\x98\x58\x54\x47\x38\xec\x1f\x98\xf4\x78\x48\x8d\x07\xf7\x0e\x7b\xa7\x0f\x89\xfd\xa1\xb1\xd5\x26\x84\xa1\x39\x2c\x3a\xa6\xd0\x69\xbb\xd9\x0e\x72\x4d\xb4\x82\x4c\x5a\xc4\xc7\x3a\x29\xe5\xa9\xda\xa1\x28\x09\x42\xe6\x29\x7b\x42\xb2\x7f\x29\xc9\x97\x3a\x5e\xc6\x34\x7f\x39\x0e\x3a\x1a\x0b\xeb\x39\xa7\xea\x74\xb7\x81\xc6\xb3\x1f\xa2\xf1\x2e\xe5\xd8\x51\x30\xa7\xaf\x06\x63\x13\xa5\xf5\x28\x5a\xa9\xb5\xec\x21\x5f\xa9\xd8\x3e\xfc\x3b\x40\xa8\x1d\xc7\x4e\x1d\x45\x64\x22\x5c\x5c\x0a\x6d\x6b\xe2\x2d\xa1\xb1\xcc\xa1\x0b\x9d\x22\xce\x19\x65\x93\x0f\xff\xb4\x0d\xef\xa8\xb5\xd1\x8a\xd0\xe8\x15\xfc\x19\x67\xa6\x93\xda\xab\x6c\x49\xe2\x80\x1e\x9c\x02\xdb\x2e\xbd\xb3\x0b\x71\x62\xd4\xec\x1e\x67\x45\x19\xe7\x51\x2e\x56\xca\xb4\xcc\xfb\xfe\xd3\x4e\x3c\x0b\x77\x4e\xeb\x0e\x45\x56\x7a\x18\x86\xb8\x59\x33\xdc\x8b\x9a\xa7\x0c\xda\x57\xbf\xa1\x79\x46\x1f\xe5\xce\xbd\xbd\x46\xe4\x67\x77\xdc\x4c\x1b\x0a\x08\x9b\xf8\x2f\x8b\x9b\x85\xb9\x1b\x24\x35\xd8\x30\x31\xa9\x0c\xf4\x25\xd3\x5d\xfa\x16\x85\xa2\x73\x65\xc2\xdb\xb0\x14\x67\x6b\x74\x32\x8b\x99\xea\x4b\x8b\x75\x28\xda\x2b\x45\xbb\x9c\xe2\x76\xf3\x8d\x23\x08\xe8\x1b\x71\x99\x8d\xfb\x70\x7c\x66\xec\x6f\x27\x78\x77\xd9\xf2\x25\xde\x8c\xf3\x70\xfe\x9c\xcf\xb7\xab\x1f\xab\x9f\x01\x00\x00\xff\xff\x1a\x02\xa5\x30\x21\x09\x00\x00")

func contractsErc20tokenSolBytes() ([]byte, error) {
	return bindataRead(
		_contractsErc20tokenSol,
		"contracts/ERC20Token.sol",
	)
}

func contractsErc20tokenSol() (*asset, error) {
	bytes, err := contractsErc20tokenSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/ERC20Token.sol", size: 2337, mode: os.FileMode(420), modTime: time.Unix(1473106292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _contractsTokenSol = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\xdb\x6e\x1b\x37\x10\x7d\xf7\x57\x4c\xfd\x90\xee\xba\x1b\x29\x75\xda\x22\x80\x10\x03\x81\xd3\x16\x7d\x2a\x90\xfa\x2d\x70\x0d\x6a\x77\xd6\x62\x4d\x91\x0b\x92\x2b\x45\x30\xfc\xef\x9d\x21\x97\x7b\xd1\xc5\x35\x10\x04\x15\x02\xc4\xe2\x70\x2e\xe7\xcc\x99\xa1\xe4\xba\x31\xd6\xc3\xf9\xaf\x9f\xae\x2f\xdf\xdc\x98\x07\xd4\x33\x67\xd4\xf9\xe2\xec\xac\x34\xda\x5b\x51\x7a\x08\xa7\x20\x1d\x0c\x77\x1e\xcf\x80\x3e\xce\x5b\xa9\xef\xa1\x69\x97\x4a\x96\xa0\xc5\x1a\x17\xe1\xbc\x95\xda\xbf\x4b\xc7\x15\x96\x72\x2d\x94\x5b\x1c\x71\x71\xbb\xf5\xd2\xa8\x63\x96\x0d\x5a\x27\x8d\x8e\xa6\xb5\x68\x1a\xb6\x65\xa2\xaa\x2c\x3a\x07\xef\xaf\x42\x8e\xcb\x9f\x7f\xc9\x61\x29\x94\xd0\x25\xba\xd3\x57\x9f\x73\xcf\x41\x28\x65\xb6\x58\x11\x60\xf6\xaf\x5b\x5d\x7a\x4a\x1c\x41\x67\xe1\x2c\x41\xa2\xfb\x70\xe7\x8d\x17\xea\xaf\xb6\x69\xd4\xae\xe8\xad\x5d\xed\x77\x4c\x41\x31\xf1\x79\x07\x77\x89\x80\xc3\xeb\x11\x7e\x7f\x9c\xc3\x63\xff\x77\x42\xf5\x79\xed\xee\x67\x0e\x75\x85\xf6\x16\xde\x4f\xd2\x2f\x60\xfa\x99\xcf\xe1\x77\xb9\x41\xf0\x2b\x84\xd2\xa2\xf0\xc6\x32\x38\x90\x5a\x7a\x29\x14\x78\x46\xe4\xfa\x0c\xa3\x48\xfb\x81\xfb\x3b\x8c\x87\x8d\x43\x6b\xf9\x93\x00\xb1\x65\xda\xdd\x00\x2e\x80\x62\xdb\xb8\xbb\x4f\x91\xde\xf9\x05\x7c\x68\x1a\x6b\x36\xe8\x40\xe8\x8a\x6b\xd5\x50\x52\x95\x2e\x94\x6d\xb1\x44\xb9\x61\x6e\x7a\xf1\x5d\xcc\xa7\x7d\x11\xd1\xfd\x83\xae\xae\xc9\xad\x6f\xe9\x9d\x6b\x02\x49\xc5\xd0\xa9\x8d\x50\x2d\x16\xb0\xdc\x79\x4a\x76\x87\x5f\x28\xde\x47\xe1\x45\x4e\x59\x7c\x6b\xb5\x83\x6c\x69\xa8\x50\xd7\x96\xc4\xb3\x1b\x93\xdf\x49\x62\xcc\xfd\xe7\x94\x20\x74\x21\x84\x1e\x20\x47\x48\x42\x65\x83\x43\x31\xaa\x28\x5e\xcf\x3b\x85\xc5\x56\x31\xe6\x11\x64\x4c\x21\x06\xa0\xf4\x2f\x74\x32\x11\xb1\x33\x2d\x6c\x85\xf6\xd4\x38\x58\x22\x68\xe3\x65\x2d\xb1\x9a\xc1\xcd\x8a\x46\xb3\xb4\xa2\xf6\x91\xc4\x3e\x82\x93\xf7\x5a\x10\x54\xa4\x09\xd0\x2d\x25\xdc\x81\x33\x14\x17\xa1\x32\xe8\xf4\xf7\x1e\x56\x82\xf5\x62\x48\x22\xa5\x6a\x2b\x04\x31\xa4\x93\x1a\x56\x48\xae\xff\xb4\xce\x43\x4d\x52\xf2\x94\x66\x36\x42\xb0\x57\xf8\xd0\x89\xda\x9a\xf5\x61\x1b\x7a\x73\x90\xe1\x75\x97\xe6\x48\x7b\x46\x29\xa4\xe7\xad\x23\x9c\x6b\xd7\xc8\x5a\x11\x1e\xb6\x2c\x18\x2e\x3f\xd4\x13\xcf\x02\x4d\xcc\xe7\x85\x5b\x99\x56\x55\x17\xb1\xa7\x58\x15\x60\xc8\x66\xb7\xd2\x61\x80\xbd\x65\x2b\xb4\xf4\x6d\x23\xb4\x54\x4a\x24\x35\x11\x5a\xe7\x51\x54\x03\x3e\x59\x67\xdf\xa5\x0e\xce\x38\x78\x16\x0a\xfd\x29\xfe\xf7\xf6\x32\x73\x2b\xf1\x36\x3b\x3f\x41\x42\xd1\xa1\x2f\xd2\xf7\xe0\x95\x9f\xe7\x79\x5e\xc0\x44\x24\x1d\x3b\x0c\xa6\x18\xb3\x40\x72\xa4\x43\x6b\xb6\x0b\x1a\x9d\x54\x54\x14\x2e\x78\x9b\xc4\xf7\x34\x9d\x0d\x72\xd6\xae\x46\x9b\x8d\xc8\xde\xef\xc4\x0b\xe4\x3f\x9f\x7f\xc4\x5a\xb4\xca\x77\xd4\xbb\xc9\xae\x28\x05\x2b\x87\x14\x48\xbc\x59\x52\xd6\x17\xc8\x2e\xff\xe6\xf8\xaf\xe1\xc7\x7c\x2c\x90\x3f\x6a\xd6\xac\x8d\x7b\x07\x14\x0a\x1e\x7a\xd3\xfa\x49\x34\x5e\x02\x14\x91\xfa\xec\x5a\xd2\xa9\xb1\xd8\xed\x29\xca\x0d\x5e\xd2\xfa\xb9\xe7\x66\x1b\x5d\x84\x01\xd0\xc8\x42\x30\x50\xae\xb0\x7c\xa0\x26\x01\x49\x24\x89\x79\x6b\x45\x33\xce\xff\x09\x1b\x25\xca\xb8\x0f\xe9\xe6\x56\xfa\x55\x14\x0d\x4b\xe1\xa0\xe1\xa4\xb6\x9a\x28\x39\xb6\x76\xaf\xd2\xc4\xc3\xab\x57\xc3\x62\x26\x6e\x6f\xe1\x87\x64\xb9\x9a\x1a\xc6\x74\xbe\x2c\x6e\x1f\xe7\xcd\xd8\x97\x3f\x47\x7d\x5f\x1f\x6e\xa1\xc9\xdd\x58\xdd\xf1\x4b\x37\x49\x26\x13\x25\xb2\x54\xfa\x4d\x35\xbe\x7e\xa0\xba\xa0\x3c\x40\x45\x73\xf4\x98\xac\x35\xbd\x01\x98\xb4\xfa\x74\x76\x5c\x97\xbf\xd1\x66\xd8\xdf\x13\x5f\x2b\x55\xc7\x4f\x14\x69\x45\x2c\x49\x8f\x33\x18\x9a\x4e\x8d\x56\x92\x87\x3e\xf6\x9d\xf6\xa2\xe1\xb5\xce\x8f\x8b\xac\x27\xdb\x94\x66\xd7\x23\xad\x3c\x71\x2f\x58\x16\x41\x48\xe1\x07\x03\x97\xe3\x4e\x4a\x24\x00\xd8\xeb\x62\x7a\x39\xa2\xed\x9b\xa9\xe8\x6b\x52\xbf\x40\x68\xcf\x89\x67\xbf\x86\x13\x42\x7c\xa6\x9a\x13\x1e\xbd\x2a\x3b\x61\x7c\x4b\x41\x76\x20\xfe\xac\x07\x35\x9a\xad\x46\x9b\xf3\xfb\xe7\x3c\xeb\xa2\x97\x5e\xd2\x64\xe7\x33\x26\xad\x4b\x35\x50\x12\x82\xdc\x2e\x8e\xe6\xec\x9e\x9a\xff\xfc\xc5\xf2\x3f\xfe\x3e\x39\x49\xf0\x01\x16\x2e\x80\x31\xef\xf1\x37\x1a\xe7\x2e\xfa\x73\x8c\x5a\x5c\xd3\xc0\xd1\xa0\x0d\xd8\xba\xcc\xbd\x7a\x22\xa1\x03\xb8\xe3\xe5\x64\xd3\x95\x40\xa3\x82\xfc\xee\xf3\x8f\x07\x42\x1b\x66\x3c\xec\x83\xf4\x1a\xf3\x69\xc5\x4f\xc7\x52\x94\x0f\xc3\x7c\xc7\xf7\x36\x65\x78\x3a\xfb\x37\x00\x00\xff\xff\x47\x08\x65\x8b\x1b\x0d\x00\x00")

func contractsTokenSolBytes() ([]byte, error) {
	return bindataRead(
		_contractsTokenSol,
		"contracts/Token.sol",
	)
}

func contractsTokenSol() (*asset, error) {
	bytes, err := contractsTokenSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/Token.sol", size: 3355, mode: os.FileMode(420), modTime: time.Unix(1473122379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _contractsToken_testGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\xdf\x6f\xea\x36\x14\x7e\x26\x7f\x85\x87\xb4\x29\xa9\x68\x52\x36\x4d\x9a\x90\xee\x03\x74\x6d\x87\xee\x2d\xad\x2e\x48\x7b\x44\x26\x31\x60\x35\x71\x32\xdb\xe9\x2d\x9b\xfa\xbf\xef\x3b\x76\xc8\x25\xb4\xa2\x6c\x3c\x10\xe7\xf8\xfc\xfc\xbe\x73\x4e\x2a\x9e\x3e\xf1\x8d\x60\x05\x97\x2a\x08\x92\x64\x53\x8e\x36\x42\x09\xcd\xad\x60\x7c\x25\x71\x66\x97\x97\xa6\xcc\xd9\xa2\x7c\x12\x2a\xa6\xd3\xe5\x65\xf5\xb4\x71\x06\x38\x96\xb5\x6d\xae\x36\x65\x10\xc8\xa2\x2a\xb5\x65\x61\xd0\xeb\xa7\x7a\x57\xd9\x32\x11\x69\x66\x78\x1f\xef\xeb\x9c\x6f\xe8\x99\x97\xee\x51\x70\xbb\x4d\xe0\x9f\xce\xa5\xa1\x7f\x2b\x8c\x95\x0a\x02\x9c\x37\xd2\x6e\xeb\x55\x9c\x96\x45\x22\xec\x56\x68\x51\x17\xc8\xec\xb2\x3d\xf3\x34\x2d\x6b\x65\x4d\x82\x14\xe1\x45\x65\xfd\xff\x63\x94\xac\x50\xbc\x50\x99\x39\xc7\x1a\x17\x45\xa9\xce\xd3\xd4\xe2\x5c\xbd\xc4\xee\x2a\x71\x5e\x7c\x87\xe7\x91\xa6\xb1\x5a\xd8\x74\xab\x13\x07\xde\x7a\x97\x70\x63\x84\xb6\xfd\x20\x0a\x82\x67\xae\x89\x88\x27\xb1\xbb\x62\x87\xbf\x0b\x47\x49\xfc\xa8\xe5\x33\x48\xfe\x2c\x76\x4e\x67\xf8\x91\x0e\xcf\x32\xdd\x71\xe4\x01\x89\xc7\x90\x0b\x63\xbc\xc2\xf0\xa4\x42\x6d\xb7\xdd\x28\x44\x42\xbc\xd0\x5c\x19\x9e\xda\x87\xca\x42\xa9\xa1\xe4\x50\xa9\x21\x29\x9e\xcb\xa2\xce\x91\x4e\x36\xf1\x92\xa0\x77\x37\x9e\x2f\xbf\x4c\xef\xa7\x8b\xbd\xf2\x27\x86\x96\x8a\x67\xe2\xdb\x54\xd9\xf0\xd7\x2b\xfa\x45\x41\x6f\xf6\x30\xbb\xbe\x39\x0c\xdc\x51\xfb\x19\x1a\xf3\xc5\xf8\xeb\x62\x3a\xbb\x5b\x4e\xc6\x5f\xc6\xa4\xdc\xd1\x18\x5e\x75\x7f\x11\xc1\xbb\xae\x55\xca\x16\x80\xfd\x1e\x83\x10\x16\xec\xa2\xe9\xdf\xf8\x3e\x62\xff\x78\xd8\x07\x6c\x09\x47\x9e\xb8\xf8\xae\x99\x2a\x80\x19\x46\x1e\xf2\x53\xf7\x1e\xee\xf6\xf6\xb1\x5e\xc1\x62\x51\x36\x60\x86\xe4\x9e\x84\xb9\x4c\x61\x10\xed\xd1\x3f\xa5\x3f\xec\xea\x13\x19\x54\x25\x18\x40\x99\x10\x8a\x6c\xcf\x44\xa9\x9d\xff\xe8\x3b\x1b\x50\xdc\xb3\x00\xe5\x63\x22\xd0\x65\x3d\x6a\x66\x57\x83\x91\x66\xec\x07\x0d\x28\xf4\x7a\x4d\x02\x23\xe6\x0a\x1a\x90\x68\xc2\x73\xae\x52\x31\x62\xc7\xa8\xd3\xed\xeb\xe0\x5c\x67\xc3\x33\x9c\xa1\x04\xda\x3b\xf1\x23\xd7\x46\x10\xac\xa5\x89\x6f\x5e\xa4\x0d\x8b\xf8\x6b\xad\xc2\x28\x0a\x5e\x1b\x26\xe7\x72\x03\xfc\xa9\xee\xb7\xcd\x1f\x79\x98\xbc\xca\xad\x22\x7a\x31\x76\xb5\x56\x8c\x4c\x43\xee\xb3\x3a\xea\xf7\x01\xb3\x2f\x68\x0a\x1a\xef\xb6\xc5\x65\xa9\x22\x16\xbe\x15\x0e\x98\xd0\xba\xd4\xae\x71\x7a\x06\x61\x38\xbc\x0b\x27\x65\xa3\x96\x53\x8a\x1f\xda\x17\x7a\xfe\xc1\xcd\x36\x8c\xe2\xc9\x0e\x4d\x17\x46\x03\xd6\xd0\xd5\x93\x6b\x67\xf3\xc3\x27\xa6\x64\xee\xbc\xed\x33\xc5\xbb\xf3\x47\xa8\x04\xad\x14\xde\xfe\xc4\x36\x99\xef\x43\x86\x6d\x70\x78\x7b\x6d\xc1\xc9\x44\x95\x97\x3b\xd0\x2c\x95\xb4\x92\xe7\xf3\xba\xaa\xf2\x1d\xcd\xef\x26\xc6\x80\x00\x6a\xc5\x0b\xc1\xb0\x8d\x30\x00\x78\xcb\x24\x76\x94\x61\xb5\x54\xf6\x37\xbc\x9a\x5d\xb1\xc2\x77\x63\x7f\x1d\xb1\x0b\xf7\xc5\x98\x03\x25\x14\x4f\x69\x2e\x31\x0a\x00\x8c\xa4\x6d\xd5\xbf\xbb\xa0\x4e\x93\x1a\xec\x64\xa7\x12\xd9\x4d\x87\xd2\xb1\x93\x26\x09\x28\x3d\x7a\xfa\xc4\xe8\xe4\x73\xc2\x09\xa3\xfc\x0e\x6c\xf8\x4a\xc5\xb7\xdc\xf2\x7c\x1d\xf6\x6f\xb9\xcc\x45\x86\xec\x1a\x1c\x98\x12\xdf\x7c\xae\xa0\x5c\x59\x8d\x3c\x46\xec\xc7\xe7\xbe\xcb\xdc\xe1\xd6\x0e\x4e\x7c\x8d\x9e\x40\xbb\x51\x90\x06\xf2\x9f\x0e\x6b\xa7\x50\xd7\xad\x0f\xfa\x79\x0c\x20\x3e\x5c\x8b\xa3\x66\x55\x9e\x28\x1f\x41\x5f\x0f\x96\xd2\xd4\x23\x20\xff\x46\x4f\xdb\xef\xbb\x69\xe1\x5a\xcc\xe7\x0e\x88\x1b\x5e\xbb\xab\x0e\xed\xd4\x77\x39\xa2\x20\xc7\x20\x36\x24\x89\x1e\x3e\xf7\xa9\x0c\x07\x25\x16\x17\xcc\x9d\x9f\x78\x06\x81\xdb\x58\xee\xd3\x13\xdf\xfc\x55\xf3\x3c\xb4\x07\x4e\xc8\xc2\xed\x12\x37\xa9\x1d\xdb\x66\x7a\x1f\xd6\x6e\x88\xae\xde\xf1\xf2\x26\xb7\xc6\x4d\xd4\x29\xd7\x01\xb2\xfe\x8f\xb5\xfe\xf2\x41\xa5\xcb\xb6\x15\x7d\xb2\x6d\x10\xbf\x7d\x3a\xa9\x45\xef\xb7\x51\xc5\x95\x4c\xc3\x93\x6d\x61\xf0\x2e\xf4\xe4\x2c\x70\xb4\x48\x65\x25\x85\xb2\x1f\xab\x0f\x4f\x63\x49\x85\x76\x22\x7f\x00\x3d\xd4\x8f\x83\x13\x03\xff\x06\x00\x00\xff\xff\xcf\x44\x7a\x44\x3e\x0a\x00\x00")

func contractsToken_testGoBytes() ([]byte, error) {
	return bindataRead(
		_contractsToken_testGo,
		"contracts/token_test.go",
	)
}

func contractsToken_testGo() (*asset, error) {
	bytes, err := contractsToken_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/token_test.go", size: 2622, mode: os.FileMode(420), modTime: time.Unix(1473121990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\xc9\xcf\x4e\xcd\xb3\xe2\x52\x50\x88\xcf\x4b\xcc\x4d\xb5\x52\x00\xf3\x41\xdc\x92\xfc\x92\xc4\x9c\xe0\xd2\x82\x82\x9c\x4a\x2b\x05\x43\x03\x03\x90\x58\x71\x65\x6e\x52\x7e\x0e\x50\x91\xbf\x37\x88\x9b\x92\x9a\x9c\x99\x9b\x98\x53\x6c\xa5\x60\xc1\x05\x08\x00\x00\xff\xff\x28\xd7\x12\xbe\x48\x00\x00\x00")

func deployYmlBytes() ([]byte, error) {
	return bindataRead(
		_deployYml,
		"deploy.yml",
	)
}

func deployYml() (*asset, error) {
	bytes, err := deployYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy.yml", size: 72, mode: os.FileMode(420), modTime: time.Unix(1473106292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/ERC20Token.sol": contractsErc20tokenSol,
	"contracts/Token.sol": contractsTokenSol,
	"contracts/token_test.go": contractsToken_testGo,
	"deploy.yml": deployYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": &bintree{nil, map[string]*bintree{
		"ERC20Token.sol": &bintree{contractsErc20tokenSol, map[string]*bintree{}},
		"Token.sol": &bintree{contractsTokenSol, map[string]*bintree{}},
		"token_test.go": &bintree{contractsToken_testGo, map[string]*bintree{}},
	}},
	"deploy.yml": &bintree{deployYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

