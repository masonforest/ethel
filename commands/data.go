// Code generated by go-bindata.
// sources:
// project_template/contracts/Token.sol
// project_template/contracts/token.go
// project_template/contracts/token_test.go
// project_template/deploy.yml
// project_template/libraries/ERC20Token.sol
// DO NOT EDIT!

package commands

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsTokenSol = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\xdb\x6e\x1b\x37\x10\x7d\xf7\x57\x4c\xfd\x90\xee\xba\x1b\x29\x75\xda\x22\x80\x90\x00\x81\xd3\x16\x7d\x2a\x90\xfa\x2d\x70\x0d\x6a\x77\x56\x62\x4d\x91\x0b\x92\x2b\x45\x08\xfc\xef\x9d\x21\x97\x7b\xd1\xc5\x35\x10\x04\x5d\x04\x08\xcc\xe1\x5c\xce\x99\x33\x43\xc9\x4d\x63\xac\x87\xcb\xd9\x6c\xae\xe4\xd2\x0a\x2b\xd1\xcd\x7f\xfd\x78\x73\xfd\xea\xd6\x3c\xa0\x9e\x39\xa3\x2e\x17\x17\x17\xa5\xd1\xde\x8a\xd2\x43\x38\x05\xe9\x60\xb8\x03\x5f\x2e\x80\x3e\xe7\xad\xd4\x2b\x68\xda\xa5\x92\x25\x68\xb1\xc1\x45\x38\x6f\xa5\xf6\x6f\xd2\x71\x85\xa5\xdc\x08\xe5\x16\x27\x5c\xdc\x7e\xb3\x34\xea\x94\x65\x8b\xd6\x49\xa3\xa3\x69\x23\x9a\x86\x6d\x99\xa8\x2a\x8b\xce\xc1\xdb\x77\x21\xc7\xf5\xcf\xbf\xe4\xb0\x14\x4a\xe8\x12\xdd\xf9\xab\x4f\xb9\xe7\x20\x94\x32\x3b\xac\x08\x31\xfb\xd7\xad\x2e\x3d\x25\x8e\xa8\xb3\x70\x96\x20\xd1\x7d\xb8\xf7\xc6\x0b\xf5\x57\xdb\x34\x6a\x5f\xf4\xd6\xae\xf6\x7b\xa6\xa0\x98\xf8\xbc\x81\xfb\x44\xc0\xf1\xf5\x08\xbf\x3f\xce\x3b\x5a\xf9\x4b\xa8\x3e\x6d\xdc\x6a\xe6\x50\x57\x68\xef\xe0\xed\x24\xfd\x02\xa6\xdf\x7c\x0e\xbf\xcb\x2d\x82\x5f\x23\x94\x16\x85\x37\x96\xc1\x81\xd4\xd2\x4b\xa1\xc0\x33\x22\xd7\x67\x18\x45\x3a\x0c\xdc\xdf\x61\x3c\x6c\x1c\x5a\xcb\x5f\x02\xc4\x96\x69\x77\x03\xb8\x00\x8a\x6d\xe3\xee\x3e\x46\x7a\xe7\x57\xf0\xbe\x69\xac\xd9\xa2\x03\xa1\x2b\xae\x55\x43\x49\x55\xba\x50\xb6\xc5\x12\xe5\x96\xb9\xe9\xd5\x77\x35\x9f\xf6\x45\x44\xf7\xf7\xba\xba\x21\xb7\xbe\xa5\xf7\xae\x09\x24\x15\x43\xa7\xb6\x42\xb5\x58\xc0\x72\xef\x29\xd9\x3d\x7e\xa6\x78\x1f\x84\x17\x39\x65\xf1\xad\xd5\x0e\xb2\xa5\xa1\x42\x5d\x5b\x12\xcf\x6e\x4c\x7e\x27\x89\x31\xf7\x9f\x52\x82\xd0\x85\x10\x7a\x80\x1c\x21\x09\x95\x0d\x0e\xc5\xa8\xa2\x78\x3d\xef\x14\x16\x5b\xc5\x98\x47\x90\x31\x85\x18\x80\xd2\xbf\xd0\xc9\x44\xc4\xde\xb4\xb0\x13\xda\x53\xe3\x60\x89\xa0\x8d\x97\xb5\xc4\x6a\x06\xb7\x6b\x9a\xcd\xd2\x8a\xda\x47\x12\xfb\x08\x4e\xae\xb4\x20\xa8\x48\x13\xa0\x5b\x4a\xb8\x07\x67\x28\x2e\x42\x65\xd0\xe9\xef\x3d\xac\x05\xeb\xc5\x90\x44\x4a\xd5\x56\x08\x62\x48\x27\x35\xac\x91\x5c\xff\x69\x9d\x87\x9a\xa4\xe4\x29\xcd\x6c\x84\xe0\xa0\xf0\xa1\x13\xb5\x35\x9b\xe3\x36\xf4\xe6\x20\xc3\x9b\x2e\xcd\x89\xf6\x8c\x52\x48\xcf\x6b\x47\x38\xd7\x6e\x90\xb5\x22\x3c\xec\x58\x30\x5c\x7e\xa8\x27\x9e\x05\x9a\x98\xcf\x2b\xb7\x36\xad\xaa\xae\x62\x4f\xb1\x2a\xc0\x90\xcd\xee\xa4\xc3\x00\x7b\xc7\x56\x68\xe9\xaf\xad\xd0\x52\x29\x91\xd4\x44\x68\x9d\x47\x51\x0d\xf8\x64\x9d\x7d\x97\x3a\x38\xe3\xe0\x59\x28\xf4\xa7\xf8\xdf\xeb\xeb\xcc\xad\xc5\xeb\xec\xf2\x0c\x09\x45\x87\xbe\x48\x7f\x07\xaf\xfc\x32\xcf\xf3\x02\x26\x22\xe9\xd8\x61\x30\xc5\x98\x05\x92\x23\x1d\x5a\xb3\x5b\xd0\xe8\xa4\xa2\xa2\x70\xc1\xdb\x24\xbe\xc7\xe9\x6c\x90\xb3\x76\x35\xda\x6c\x44\xf6\x61\x27\x9e\x21\xff\xf9\xfc\x03\xd6\xa2\x55\xbe\xa3\xde\x4d\x76\x45\x29\x58\x39\xa4\x40\xe2\xcd\x92\xb2\x3e\x43\x76\xfd\x37\xc7\x7f\x09\x3f\xe6\x63\x81\xfc\x51\xb3\x66\x6d\xdc\x3b\xa0\x50\xf0\xd0\x9b\xd6\x4f\xa2\xf1\x12\xa0\x88\xd4\x67\xd7\x92\x4e\x8d\xc5\x6e\x4f\x51\x6e\xf0\x92\xd6\xcf\x8a\x9b\x6d\x74\x11\x06\x40\x23\x0b\xc1\x40\xb9\xc6\xf2\x81\x9a\x04\x24\x91\x24\xe6\x9d\x15\xcd\x38\xff\x47\x6c\x94\x28\xe3\x3e\xa4\x9b\x3b\xe9\xd7\x51\x34\x2c\x85\xa3\x86\x93\xda\x6a\xa2\xe4\xd4\xda\x7d\x97\x26\x1e\x5e\xbc\x18\x16\x33\x71\x7b\x07\x3f\x24\xcb\xbb\xa9\x61\x4c\xe7\xf3\xe2\xf6\x71\x5e\x8d\x7d\xf9\x3b\xe9\xfb\xf2\x78\x0b\x4d\xee\xc6\xea\x4e\x5f\xba\x4d\x32\x99\x28\x91\xa5\xd2\x6f\xaa\xf1\xf5\x23\xd5\x05\xe5\x01\x2a\x9a\xa3\x2f\xc9\x5a\xd3\x1b\x80\x49\xab\x8f\x17\xa7\x75\xf9\x1b\x6d\x86\xc3\x3d\xf1\xb5\x52\x75\xfc\x44\x91\x56\xc4\x92\xf4\x38\x83\xa1\xe9\xd4\x68\x25\x79\xe8\x63\xdf\x69\x2f\x1a\x5e\xeb\xfc\xb8\xc8\x7a\xb2\x4d\x69\x76\x3d\xd2\xca\x13\x2b\xc1\xb2\x08\x42\x0a\x3f\x18\xb8\x1c\x77\x56\x22\x01\xc0\x41\x17\xd3\xcb\x11\x6d\xdf\x4c\x45\x5f\x93\xfa\x19\x42\x7b\x4a\x3c\x87\x35\x9c\x11\xe2\x13\xd5\x9c\xf1\xe8\x55\xd9\x09\xe3\x5b\x0a\xb2\x03\xf1\x67\x3d\xa8\xd1\xec\x34\xda\x9c\xdf\x3f\xe7\x59\x17\xbd\xf4\x92\x26\x3b\x9f\x31\x69\x5d\xaa\x81\x92\x10\xe4\x6e\x71\x32\x67\xf7\xd4\xfc\xe7\x2f\x96\xff\xf1\xf7\xc9\x59\x82\x8f\xb0\x70\x01\x8c\xf9\x80\xbf\xd1\x38\x77\xd1\x9f\x62\xd4\xe2\x86\x06\x8e\x06\x6d\xc0\xd6\x65\xee\xd5\x13\x09\x1d\xc0\x9d\x2e\x27\x9b\xae\x04\x1a\x15\xe4\x77\x9f\x7f\x3c\x10\xda\x30\xe3\x61\x1f\xa4\xd7\x98\x4f\x2b\x7e\x3a\x96\xa2\x7c\x18\xe6\x3b\xbe\xb7\x29\xc3\xe3\xc5\xbf\x01\x00\x00\xff\xff\xc5\xdf\x7d\xae\x29\x0d\x00\x00")

func contractsTokenSolBytes() ([]byte, error) {
	return bindataRead(
		_contractsTokenSol,
		"contracts/Token.sol",
	)
}

func contractsTokenSol() (*asset, error) {
	bytes, err := contractsTokenSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/Token.sol", size: 3369, mode: os.FileMode(420), modTime: time.Unix(1473106292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _contractsTokenGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5b\x6f\xe3\x36\x16\x7e\x8e\x7f\x05\xeb\x87\xc2\x0e\x3c\x0e\x25\x4a\xb2\x14\x60\x1e\x3a\xd3\xdd\x6e\xf7\x61\x0a\x74\x02\xec\x43\x31\x68\x29\x89\x72\x88\x91\x25\x43\x92\x73\x41\x90\xff\xbe\xe7\xf0\x22\xc9\xb1\xec\xd8\x73\x69\x3a\x45\x9d\x19\x5b\xa6\xc8\x73\xf9\xce\x39\xe4\x47\x53\x17\x17\xe4\xea\x5a\xd6\x24\x93\xb9\x20\xf0\xc9\x0b\xc2\x37\x4d\xb9\xe2\x8d\x4c\x78\x9e\xdf\x93\xa5\x28\x44\xc5\x1b\x91\x92\x9f\x4a\x12\xcb\x22\x95\xc5\x72\x4e\x7e\x2c\x49\x51\x36\x64\x55\xa6\x32\xbb\x27\x1c\xc7\xdd\x8f\x40\x56\x72\xcd\x8b\xa5\x20\xb7\x32\xcf\x49\x2e\x3f\x0a\x10\x10\x0b\x92\x97\x75\x43\x36\xeb\xb2\x20\xcd\xb5\x20\x85\xb8\x6b\x48\x25\x5e\x19\xc9\xb2\x2c\xbe\x1b\x8d\xd6\x3c\xf9\xc8\x61\xe4\x8a\xcb\x62\x34\x92\xab\x75\x59\x35\x64\x32\x3a\x1b\x83\x25\xd7\x17\xb1\x5c\x8e\xe1\xba\x6e\x2a\xd0\x5e\x8f\x47\x70\xbd\x94\xcd\xf5\x26\x9e\x27\xe5\xea\x42\x80\xd4\x4a\x6c\x56\x17\xcb\xf2\x55\x7b\xcd\x93\xa4\xdc\x14\x4d\x7d\xc1\x63\x39\x3e\xb1\xff\x05\xfa\x79\xcc\x20\xb8\xb1\x2a\x8b\xe3\x7a\x56\xe2\xa2\xb9\x5f\x0b\xb0\x7e\x3a\x42\xa8\xae\xca\x8f\xa2\xf8\xe1\xcd\xcf\x88\x3a\xc2\x22\x8b\xf5\xa6\x21\xd8\xb0\xa9\x01\xed\xa6\x6c\xa1\x57\xb7\x0d\xf4\x24\xab\xca\xd5\x7c\x94\x94\x05\x40\xda\x8a\x78\x4d\xfe\xf8\xed\x61\xac\x1a\x79\xd1\x8c\x2f\x9b\x6a\x23\x66\x63\x25\xb1\x1e\x5f\xfe\xf6\x61\x36\x2e\xf8\x4a\x8c\x2f\xf5\xc7\x6c\x5c\x6e\x1a\x73\xeb\xc1\xde\x81\x56\x34\x0f\xae\x34\xca\xe3\xc7\x0f\x6d\x4b\xb6\x29\x12\x8c\xd3\xf8\x71\x76\x40\xcb\x80\x28\x9e\xa6\x95\xa8\x6b\x25\xcb\xdc\x8c\x79\xce\x8b\x04\x60\x78\xc6\x8a\x8d\x2c\x1a\xd7\x0f\x8e\x30\x23\xe3\x79\x3d\x68\x47\x25\x12\x21\x6f\x44\x35\x60\xcf\xac\xed\xc4\x57\x18\xf6\x61\xbd\xa6\x4b\x53\xf1\xa2\xce\x94\x9c\x01\x93\xeb\x4d\x96\xc9\x44\x8a\xbe\x90\xb8\x2c\xf3\xbd\x96\xef\x1a\x2a\x0b\xd9\x48\x9e\xbf\xdf\xac\xd7\xf9\xfd\x80\x29\x9d\xb5\x0d\x46\xfc\x9d\x0e\xe2\xde\x70\x29\x68\xaa\x4d\xd2\x94\x95\x1a\xcb\x8b\xb2\xb8\x07\x37\xeb\x21\xac\x20\xad\xc4\x9d\x48\x6d\x34\x8d\x9e\xdf\x31\xcd\x86\x71\xdb\x33\xa0\x29\x9f\xe9\x6e\x54\xdb\xfe\x37\x3c\xdf\x88\x83\xb0\x5f\x75\xb0\x9b\x4e\xe2\x06\x51\x7e\xfc\xf0\x47\x57\x40\x6f\x64\x61\x0b\x08\x6a\x6f\x0d\xb3\x58\x4a\xe2\xfb\x46\x24\x65\x2a\x74\x21\x65\x65\x45\x52\xb1\xce\xcb\x7b\x2c\x9f\x42\xdc\x42\xc7\x02\x42\x9a\x34\xf5\x56\x1d\xa1\x24\xa8\x23\x7a\x17\x50\xfc\xf3\xa8\xef\xaa\x77\x27\x70\x28\x63\x2e\x0b\x29\xfc\xd3\xd7\x21\x63\x51\xe8\x50\x47\xf7\x0a\xb1\x0f\xc5\xf7\x88\x46\xaa\x15\xff\x73\x90\x41\x5d\xf8\x80\xfe\x4e\x00\xd7\x34\xa2\xa1\x83\x32\xf1\xae\x0b\xd7\xfa\x9b\x47\x43\x06\xdf\xfc\x88\xfa\x7e\xe8\xfa\x5e\xe8\xf9\x4e\xe8\x85\x4a\xbb\x93\xa1\x0c\x1c\xeb\x44\xa0\xd9\x01\x19\x41\x88\x06\xf9\x51\x00\xba\x40\x4c\x04\xe3\x22\x9f\xa2\x66\xd0\x12\x31\xf8\x64\xd4\x43\xdb\x42\x37\xa2\xd4\x5b\x64\xf0\x91\x8a\x24\x8d\x40\x72\x1c\xb8\x3c\x4c\x03\xca\x3c\x9f\x47\x61\xc8\xc2\x20\x4b\x42\x2f\xe6\x41\x9c\xe0\x6d\x8f\xd2\x30\x0b\x58\xe0\x66\x11\x03\x13\x45\xc6\x84\x1f\x30\xb4\x1a\xe4\xb3\xc8\x45\xef\xe0\x5b\x80\xda\x42\x68\x77\x10\x0d\x9a\x32\x7f\xa1\x11\xc8\x32\x27\x72\x02\x10\x0b\xe6\x3a\x8b\xd0\x87\x57\xec\xab\x3e\x89\x03\xa3\x1d\x9f\xfa\x71\x48\x43\xd7\x71\x1c\x5f\x79\x03\x23\xd1\x37\xc0\xc1\x47\x54\x28\x22\x4d\x79\xea\x07\x38\x4e\xff\x41\x8b\xeb\xc6\x0a\x77\x87\xaa\xde\x2c\xc2\xf7\x8c\x81\x2c\x37\xa4\x1a\x6d\xf0\xd6\x47\xf4\x94\x5c\xca\x7d\x7f\x11\x81\xff\xd4\x51\x7d\x1c\xa3\x4f\xb5\x03\xc2\x70\x07\x25\x80\x74\x3f\x52\x91\x00\x7f\xc0\x23\x2d\x27\x52\xf6\x0a\x5f\xdb\x00\x31\x09\xfa\xd9\x20\x4c\x4c\x95\x1d\x3e\xf5\x02\x46\x83\x2c\x4d\x05\x64\x86\xe3\x78\x38\x92\x39\x88\x46\xc0\xdc\x85\x70\x99\x2f\x98\x6e\x0d\x33\xdd\xca\x41\x60\x94\xc4\xb1\x6e\xe5\x0b\x7f\xe1\xc7\x60\x49\xac\xb2\x40\x61\x48\xf1\xd3\x43\xab\x4c\xe4\x9d\x90\x61\xbc\x75\xf4\x6d\x2e\xb4\xf1\xd6\x19\xe7\x61\xa6\x74\x31\x07\xcf\x5d\x08\xa6\x42\x00\xee\x7b\x90\xa1\x2c\x64\x60\x3f\x7a\xa6\x72\x24\x64\x78\x17\xf1\xd3\x92\x15\x32\x14\xa5\xa8\x98\x3a\x0b\x0e\x91\x51\x1a\x21\x5e\xcc\xf7\xc0\x3c\x17\x25\x74\x78\x99\x51\x80\x12\x5e\xa1\xc5\xd4\x63\xbe\xcd\x6d\x95\xe5\x6d\xbe\x7b\x70\x05\x6d\x90\x95\xb6\x7f\x10\xd8\xfe\x2e\xbc\x2f\x58\x76\xe4\x8b\xb1\xa1\x4a\x32\x55\xe4\x28\x1d\x2e\xe6\xa5\xf1\x2a\x05\x7c\x11\x47\x9d\x45\xda\x5a\x55\xd1\xe0\x15\xd5\x9e\x60\x7e\x40\xf4\x5c\x85\x11\x56\xa4\xa9\x4a\xed\xa5\x6f\xaa\xda\x7c\x57\x68\xc0\x9f\x1b\x69\xa9\x94\xaa\x48\x85\x0a\x7f\xaa\xe2\x40\x99\x8a\x51\x86\x50\xaa\xfc\xa1\xa6\x7e\x34\xba\x81\x45\xdc\x0b\x10\x71\x88\x10\x33\x71\x87\x38\x2b\x2d\xcc\x44\x1a\xe6\x0d\x55\x4d\x5b\xd6\xa8\x9c\x74\x4d\x65\x18\x4f\x20\xfe\x10\x51\xac\x07\x9b\x45\x98\xfb\xbe\x8b\x76\x87\xf0\x9f\x32\x6b\xfd\x76\x1f\x70\xd5\xdf\xdf\x4f\xe5\x8e\xae\x0a\xaa\x2d\xc0\x2b\x17\x3d\x8a\xc1\x26\x8c\xa5\xdb\xab\x19\x8d\x25\xa0\xe3\xa8\xcc\x08\x43\xac\x34\x2d\x53\x79\xad\xa4\x75\x55\xed\x53\x9d\x0b\xa7\x44\x1e\x2a\x2c\xd0\xb3\x45\x3f\xf6\x5d\x8e\x85\x7a\x1e\xc5\x1c\x08\x51\x33\xce\xa7\x11\x0b\x17\x88\xb9\xce\xdd\xd0\xc3\x3c\x54\x3d\x16\x68\x35\xcc\x18\x0c\x10\x54\x18\x47\x0c\x31\x89\xd8\x02\xca\x39\x03\x54\x78\xea\xc4\xc2\x4d\xc2\x28\x0e\xa2\xc4\x8d\x69\x10\x66\x09\x5b\x84\x29\xe7\x91\xef\xc6\x7c\x01\x4e\xb1\xc4\xe3\x60\x93\x0b\xc5\xed\x73\x2f\xcd\x7c\x97\xc5\x4c\x64\x38\x4f\x6a\x3c\xf5\x6a\x10\x51\xce\x54\x16\x82\xff\x66\x16\x84\x59\x45\xaf\x60\x3f\xaa\x65\x49\xad\x3e\x66\x89\x02\x22\xad\x96\xa8\x7f\x19\xde\xd8\xae\x55\xb3\x96\x00\x02\x43\x97\x8a\xfa\x24\x82\x94\x99\x5e\xbb\x90\x2d\xca\x66\x3e\x42\x9e\xd1\x97\x3a\x01\x2e\x7f\x4d\xce\x71\xe8\x5c\x2d\xa7\x20\xe9\x97\x75\x53\x83\x34\xe0\xdb\xa2\x48\x95\xd4\xf9\x5b\xa3\xe4\x8d\x6e\x9c\x91\x2d\x42\x82\xe3\x97\xf3\x9f\x0b\xb0\xa1\xa5\x1f\x44\xb3\x8e\x29\x99\x68\x0a\x3c\xff\x41\x2f\xf9\x33\x72\xae\x48\x6e\xab\x0d\x48\x0f\xb4\x29\x63\x66\x44\x54\x55\x59\x4d\xc9\xc3\xe8\x6c\xcd\x2b\x58\x9b\x55\x0b\xb9\x7c\x4d\x80\x73\xcf\xff\xfb\xfe\x97\x77\x13\xc3\xf0\xe7\xef\xc4\xed\xaf\x82\xa7\xa2\x9a\x58\x8e\x3b\x9d\x8e\xce\x64\xa6\x06\x7c\xf7\x9a\x14\x32\x47\x31\x67\x95\x68\x36\x55\x41\xb6\x8d\x78\x78\x9c\x61\x07\xf3\x06\x23\x46\x67\x8f\xa3\x33\x6e\x2d\x6c\xee\x66\x3d\x58\x8d\x05\x0a\x07\x8d\x9c\x45\x43\x81\x37\x23\xd6\x54\xa3\xe3\xdf\x40\x8c\xfe\x23\xee\x26\x96\x33\x4c\x5b\x2c\x9f\xc0\xd6\x43\xeb\x73\x4d\x37\x5d\xb7\x3c\xf8\x5e\x19\xf0\xa0\xde\xdf\xc2\x4e\x4d\x54\x97\xa4\xf7\xe5\xc1\x7a\x78\xd9\xfa\x0a\xa2\x55\x07\x1b\x9a\xd2\x8e\xe8\x1a\x86\x46\x69\x8b\x46\x8f\x1d\xe7\xea\xed\x13\x07\xb7\x87\x84\x57\xc0\xa9\x53\xec\xb3\x93\xc7\xf3\x11\xe6\x87\x91\xa3\x59\x2a\xa2\xd1\xb3\x9c\xe0\x0b\x54\x61\xfc\x5f\x95\x05\xee\x20\x8d\x58\x50\xa7\x79\x9e\x16\x65\x46\x75\xd6\xe3\xa8\xff\x55\xb2\x11\x87\x87\xf5\x3c\x31\x1a\x07\xfd\xa9\x5a\xfd\xa7\x7b\x66\xe4\x76\xfe\xd9\x4e\xa6\x16\xdf\xa0\x14\x9b\x67\x68\xf6\x4f\xa8\x56\x26\xad\x30\x72\x5b\xf1\xf5\x1a\x44\x20\x7b\x45\xeb\xf3\xf2\x96\xe4\xc0\x7f\x73\x82\xdb\xf2\xba\xef\x44\x0f\x80\x41\x47\x6e\x3b\x48\x4e\xf7\xa4\x27\xfc\xcf\xf1\xe6\x3d\x64\x38\x4c\x1a\x9f\x93\x63\x33\x14\x76\x0b\x1b\x72\xb2\xae\xc4\xab\x5a\x34\x4a\x0b\x74\x85\x5d\xb5\x71\x87\x94\x6b\x9c\x9a\xea\xbe\xab\x56\x73\xe7\x67\xeb\x13\xbe\xf4\x24\x46\x7a\xaf\x21\x4f\x7b\x49\x87\x8a\xd1\xd9\xda\xc8\x05\xe7\x41\x24\x58\x82\x33\xb0\x12\xa0\x27\xdf\x7e\x0b\x88\xc4\xef\xd6\x3c\x14\x03\x9b\x18\x10\x03\xde\x2e\xaf\x61\xf7\x09\x97\x80\x8c\x11\x09\x15\xd0\x9b\xd4\xc9\xce\x34\x8f\xe2\x7a\x13\x31\x51\xab\xc1\x91\xa2\x77\xaa\xe4\x60\x60\x4e\x2d\x96\x3d\x21\x1a\x88\xca\xb6\xf2\x81\xd8\x9c\x6f\xcd\x1d\x43\x31\x49\xf4\xbd\xa3\x43\xb3\x1d\x96\x13\x43\x32\x58\x98\x07\xb1\x3b\xb9\x3e\x77\xc1\x3b\x94\xd6\xbb\x56\x1c\x4c\xf0\x5e\xc1\x0f\x82\xd9\x74\xf7\x9f\x03\xf4\x4f\x49\xce\x5f\xf9\xed\x30\xac\x30\xc7\xbc\xd2\x73\xcc\xe9\xb3\x1e\x0a\xdd\x9b\x6a\xcf\xd5\x3d\x4f\x12\x30\x53\xc1\x51\x81\x9c\x95\x68\xae\xcb\xb4\x26\x43\x35\x75\x84\xf1\x9f\xbf\x0c\x1d\x74\xc6\xd4\x4d\xcf\xa5\x4e\xe1\x27\x3b\xd7\xe5\xd0\x11\x0e\x7e\xa1\xe5\xe9\xa0\x97\xdb\x1c\xc1\x7a\xda\xd3\xfc\x29\xae\x02\x47\xd5\xf9\x90\x00\x64\x8d\xb0\xd4\x7d\x87\x9c\x03\x41\x54\xbe\xa0\x48\x52\xaf\x45\x22\x33\x50\xae\xf9\x3e\x20\xd1\xb9\xa5\xd8\xbb\x95\x3a\x31\x6c\x8f\x3c\x25\xd8\x87\x98\x3b\xf0\xf1\x5d\xae\x3d\xc8\x75\xb7\x74\xf4\x28\xac\xb9\x38\xc4\x58\x87\xa8\xe9\xcb\xb0\x51\x8b\x95\x49\xe2\xed\x38\x74\x79\xfc\x85\x22\xa2\xb5\xec\x8d\x4b\x6f\x95\x69\xc3\xa2\x87\xb4\x51\xd1\x5f\x4f\x8d\x4d\x62\x46\x81\xdf\x9f\x16\x96\x43\x31\xd8\x05\xb3\x57\x2b\xdb\x80\xf6\xca\xe5\x0b\x21\xda\xa9\xda\x8b\xea\x93\xe5\xa6\x45\xb6\x1b\xda\xa2\xdb\x35\x9d\x8a\xb0\x82\xae\xd3\xf4\x69\x28\x1f\xce\xdb\x3e\xd2\xad\x05\xea\x0a\xe1\x5d\xb6\x33\x92\xe6\xc9\x08\x23\x4c\x99\x39\xe6\xf0\xfd\x5e\x18\x77\x3c\x39\x21\x27\x8f\x45\x76\x97\xe0\x7f\xc5\x6d\xfc\x10\xb8\xca\x00\x90\xb3\x65\x43\x17\xba\x76\x77\xbe\xe3\xd5\xb4\x0f\xb9\x62\x70\xb2\xb8\x01\x2b\xf4\x8c\x3e\xb1\xe7\x47\xd3\x6e\xee\xd7\x33\xbc\x61\x56\xbc\xe2\xab\x1a\x4f\x36\xf5\xb9\x9c\x3a\xae\xc0\x85\x2c\x45\x71\x40\x77\xb4\x18\x7d\x1e\x84\xf1\x02\x73\x36\x79\x33\x27\x57\xb8\x5c\xa8\x6b\xa2\x96\xa9\x95\x5c\x5e\x37\x78\x08\x0a\x75\x01\x98\xe4\x82\x64\x52\xe4\xfa\x58\xa2\x96\xab\x75\x2e\x50\xa0\x76\x16\xfc\x81\x5e\xb9\xd4\x85\x25\x8b\x46\x54\x19\x87\x45\x48\x75\x6e\x4f\x71\x6c\x67\xb5\xa1\xe1\x76\xd1\xc3\x2e\x78\x70\x92\xf6\xc4\x99\x3c\x99\xfc\xae\xb3\xed\xdc\x72\x9b\xa9\xc2\x63\x52\x22\x0b\x3b\xdf\x62\xbb\x33\x6b\x7b\xab\x1c\x7f\x91\x30\xc0\xe8\xa8\xce\x2c\x36\xf3\xf9\xbc\xd7\x6b\xaa\xd3\x02\xc3\x69\x22\xa7\xb5\xb6\x79\x35\xef\xcd\x45\xf3\x36\x93\x5b\x43\xac\x66\xab\xcd\xaa\x01\x2d\x53\xcb\x2d\xcc\x81\x90\xf9\x9d\x45\xcf\x4c\xeb\x9c\xcb\xa2\x0d\x3b\x12\x49\x08\xc6\xaa\xbc\x01\x9c\x37\x58\x5c\x4f\x76\xff\x3a\x53\xc0\x0d\x14\x28\xc1\xff\x54\x64\x1c\x1d\x36\x3e\x42\x6e\x96\x85\x3e\x09\xbf\xe1\x32\xe7\x71\x2e\xf6\xa3\x68\x0d\xea\x23\xd9\xa7\xb8\x58\x40\x03\x3f\x87\x75\xf5\x73\x08\xa9\xae\x0e\x3b\xb4\xb6\x14\x6e\xc1\x82\xf9\xbb\x95\xdf\x6b\x2e\xd3\x93\x72\xfb\x19\x37\xb1\xea\xf6\xb8\x79\x6c\x82\x7c\x0d\x30\xac\x59\x07\xd2\xe6\x9f\xda\x6f\xc3\xd9\x6e\x08\x5e\x66\x06\xf8\xe6\xab\x7e\x6b\xbb\xf1\xf5\xea\xff\xe5\xea\x7d\xc8\xc1\x17\xab\xfc\x93\x2b\xfd\x8d\x79\xb6\x44\x05\x92\x64\x95\x10\x24\xe5\x0d\xc7\x92\xa8\xa4\x00\xb7\xf5\xaf\x4c\xed\x1e\xaf\x97\x21\xd6\x11\x7a\x67\x8f\x6e\xe7\x20\x11\x85\xbe\x2f\x73\x99\xca\xe6\xfe\x92\xd8\xa7\x38\x88\x7d\x86\x65\x62\x7f\x92\x57\xc0\xab\x29\xc5\x96\xdf\xc4\x3c\xd0\x30\xdd\x5f\x86\xd3\xd6\xde\xe1\x3a\xe4\xd5\x92\x3e\x61\x74\x9a\x91\x99\xc3\x98\x0e\xbf\x1b\x5e\xe1\xb3\x52\x88\x23\x25\xaf\x91\xac\xb7\xdd\x80\x6e\xc1\x3f\xfc\x01\x05\xf8\x19\xde\x1f\x9d\x19\xb2\x66\xd0\x1e\xaa\x49\xe8\x3e\x23\xbd\x27\x75\x94\x29\xd3\x36\x4e\xe7\x28\x47\x13\xb5\x6f\x0b\x77\xf3\x03\x58\x0f\xf8\xe3\x31\xde\x93\xa3\xad\xa4\xef\xed\x9d\xad\xf8\x7d\x9b\x99\xf9\x72\x38\xa9\xb3\xc5\xcf\xc1\xc8\x3e\x90\x71\x00\x23\x5c\x29\x27\x03\xb8\x98\x23\xcd\x43\x05\x8b\xe6\x0d\x15\x2b\x60\x61\x67\xc0\x83\x55\x69\x55\x7c\x72\x4d\xaa\x47\xa3\x0e\x54\xe2\x5f\x14\xbf\x36\xa1\xde\xe9\xb1\x03\x68\xed\xc9\x1b\x35\xe0\x69\xce\x7c\x13\xd9\xf2\x95\x7c\xee\xe8\x90\xe2\x41\xb0\xea\x93\xd5\xa6\xe1\xb8\x8d\xef\xd3\xa1\xc3\x7e\xdb\x07\x91\x0e\xf8\xdd\x58\xea\x61\x9f\xa2\xec\x8e\x9f\xf5\x23\x93\xc4\xce\x23\x1d\x24\xed\x93\x90\x04\x1f\x80\x1c\xc4\xa6\xff\xeb\xc2\x73\xf4\x09\xc9\xa1\xd1\xfd\xf4\x87\x0d\x63\x42\xbb\xca\x9d\xc6\x30\xf6\x11\x8b\xde\x93\x9e\xad\x6a\xab\xeb\x6f\x82\x7f\x9b\x95\x57\x3b\xf2\xbf\x2c\xc6\x6f\x77\x38\xac\xcd\xe8\xe1\x10\xff\xcd\x70\xbe\x7a\x7a\xea\xf6\xd7\x46\xfc\xff\x01\x00\x00\xff\xff\x7a\x65\x57\xc4\x07\x30\x00\x00")

func contractsTokenGoBytes() ([]byte, error) {
	return bindataRead(
		_contractsTokenGo,
		"contracts/token.go",
	)
}

func contractsTokenGo() (*asset, error) {
	bytes, err := contractsTokenGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/token.go", size: 12295, mode: os.FileMode(384), modTime: time.Unix(1472438500, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _contractsToken_testGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\xdd\x6e\xdb\x36\x14\xbe\xb6\x9e\x82\x33\xb0\x41\x2c\x64\xca\x76\x96\xa5\x33\xd0\x8b\x24\x4b\xba\x60\x4b\x1a\xcc\x06\x76\x19\x30\x12\x2d\x13\x91\x48\x8d\xa4\xd2\x78\x43\xde\x7d\xe7\x90\xb4\x6a\x27\x99\xeb\x4e\x17\x16\x75\x78\xfe\xbe\xef\xfc\xb8\xe5\xc5\x03\xaf\x04\x69\xb8\x54\x49\x92\xe7\x95\x9e\x55\x42\x09\xc3\x9d\x20\xfc\x5e\xc2\x99\x8c\x46\x56\xd7\xc4\xe9\x07\xa1\x18\x9e\x46\xa3\xf6\xa1\xf2\x06\x70\xd4\x9d\x8b\x57\x95\x4e\x12\xd9\xb4\xda\x38\x92\x26\x83\x61\x61\xd6\xad\xd3\xb9\x28\x4a\xcb\x87\xf0\xbd\xac\x79\x85\xef\x5a\xfb\x57\xc3\xdd\x2a\x07\xff\x78\xd6\x16\x7f\x9d\xb0\x4e\x2a\x10\xc0\xb9\x92\x6e\xd5\xdd\xb3\x42\x37\xb9\x70\x2b\x61\x44\xd7\x40\x66\xa3\xfe\xcc\x8b\x42\x77\xca\xd9\x1c\x52\x04\x2f\xaa\x1c\xfe\x1f\xa3\xfc\x1e\xc0\x0b\x55\xda\x43\xac\xe1\xa2\xd1\xea\x30\x4d\x23\x0e\xd5\xcb\xdd\xba\x15\x87\xc5\xf7\x7c\xbe\xd0\xb4\xce\x08\x57\xac\x4c\xee\xc9\x5b\xae\x73\x6e\xad\x30\x6e\x98\xd0\x24\x79\xe4\x06\x0b\xf1\x20\xd6\x63\xe2\x9f\x77\xbe\x16\xec\xd6\xc8\x47\xa8\xee\x6f\x62\xed\x2f\x27\xff\x79\xc9\xcb\xd2\x04\xd3\x80\x9d\x9d\x82\x40\x58\x1b\x6e\x26\x6f\xdf\x74\x6e\x15\x1d\x22\xc3\x6c\x61\xb8\xb2\xbc\x70\x9f\x5a\x07\xb7\x91\x6f\xb2\xd1\x88\xf4\xb3\xb9\x6c\xba\x1a\xc2\x96\x67\x41\x92\x0c\x3e\x9e\xce\xef\x7e\xbf\xba\xbe\x5a\x90\x0f\x04\xba\x84\xdd\x88\xcf\x57\xca\xa5\xc7\x63\x7c\x68\x32\xb8\xf9\x74\x73\x7e\xe1\xbd\xec\xdc\x4f\x29\x22\x5f\x76\xaa\x20\x0b\x60\xe4\x1a\x7a\x34\x6d\xc8\xbb\xd8\x5a\xec\x9a\x92\x7f\x02\x23\x19\xb9\x03\xcb\xc0\x29\xfb\x18\x1b\x1e\x50\xa7\x34\x90\xb2\xef\x3e\xf0\xd2\xdf\xde\x76\xf7\x60\xb1\xd0\x91\x83\x14\xdd\xa3\xb0\x96\x05\x18\xd0\x0d\x5b\xfb\xf4\x27\xbb\xfa\xc8\x21\xc2\x02\xfe\x00\x17\x08\x45\xb9\xe1\x51\x1b\xef\x9f\x7e\xe1\x12\x14\x37\x34\x82\xf2\x4b\x26\xa1\x01\x06\xd8\x67\x1e\x83\x95\xf6\x34\xcc\x00\xb0\x30\x18\xc4\x04\x66\xc4\x03\xca\x50\x74\xc6\x6b\xae\x0a\x31\xdb\xe6\xf4\xe7\xe9\xf4\xe8\xe8\x64\x3a\x3e\xfa\xe9\xfd\xf1\x8f\x27\x27\xc7\xef\xc7\x27\x14\x95\x9f\xb3\x43\x7d\x4f\xbe\xdd\x37\x00\xc4\x85\xc1\x6e\xb9\xb1\x02\x49\xd7\x96\x5d\x3c\x49\x97\x36\xec\x8f\x4e\xa5\x94\x26\xcf\xb1\xce\x73\x59\x41\x75\x90\x95\xd7\x3d\x4c\x03\x89\x41\xe5\x52\x61\xf1\x61\x5e\x3a\xa3\x08\x9a\xa6\x3c\x24\xf9\xa2\x89\x33\xe2\x9e\xa0\x65\x70\x2e\xfb\xf6\x95\x5a\x51\x92\xbe\x16\x66\x44\x18\xa3\x8d\x6f\xab\x81\x85\x30\x1c\xbc\x0b\x2f\x25\xb3\xbe\xe2\x18\x3f\x75\x4f\xf8\xfe\x95\xdb\x55\x4a\xd9\xd9\x1a\x5a\x32\xa5\x19\x89\xc5\x1c\xc8\xa5\xb7\xf9\xee\x03\x51\xb2\xf6\xde\x36\x99\xc2\xb7\xf7\x87\xac\x24\xbd\x14\xbc\xfd\x09\x6b\x60\xbe\x09\x99\xf6\xc1\xc1\xdb\x73\x4f\x4e\x29\xda\x5a\xaf\x53\xa9\xa4\x93\xbc\x9e\x77\x6d\x5b\xaf\x71\x32\x2b\x06\xec\x67\x44\xf1\x46\x10\xd8\x21\x30\x1b\x94\xbc\x5b\xe0\x1a\x9f\x03\x03\x00\x0c\x53\xb8\x83\x21\xc8\xc2\x72\xef\x11\xfd\xe2\x1d\x7a\x4d\x6c\xad\xbd\x3d\x8a\x85\x8c\xbd\x89\xc7\x9d\x24\x50\x80\xd1\xe1\x0d\x03\xfb\x06\x7c\xf8\x9b\x60\x97\xdc\xf1\x7a\x99\x0e\x2f\xb9\xac\x45\x09\x99\x44\x3c\x44\x89\xcf\x21\x2f\x28\x9d\x72\x06\x62\xce\xc8\xf7\x8f\x43\x9f\xa5\xc7\xdf\x8f\x07\x3b\x87\xda\x42\xdb\x60\x90\x48\xdd\x0f\xdb\x38\x31\xd4\x79\xef\x03\x9f\x80\x17\xc4\xdb\xab\x6b\x16\xd7\xd9\x1e\xa8\x10\xf4\x79\x6b\xf5\x5c\x05\xb4\xf2\x6f\xe8\x4d\xf7\x65\x03\x2d\x7c\xab\x84\xdc\x81\xce\x58\x9f\xad\x89\x98\xc0\x7a\xcb\xc8\xd0\xe7\x38\xc4\xac\x3d\x4b\xb0\x8d\x40\x3b\xfc\xcf\xde\x80\xc0\xaf\x21\xbf\xea\xd9\xc5\x5f\x1d\xaf\x53\xd7\xdb\x84\xaa\xfa\x05\xe1\xe7\x6d\xc7\x36\xce\xa0\xf5\xad\x3f\x7e\xc3\xc9\xab\x4c\xa2\x17\xba\x03\xce\xc3\x5f\x7e\x23\xb2\xa3\x5d\x5c\x77\x7d\x4f\x85\xd4\x7a\x9f\x61\x63\xec\x64\x42\xdf\xee\x91\x96\x2b\x59\xa4\x7b\x6b\x6e\xe1\x5b\x98\xb3\x43\xa8\x30\xa2\x90\xad\x14\xca\x7d\x55\x7b\xb2\x9f\xb8\x29\x00\xdd\x89\xfb\x15\x9e\x41\xfd\x65\x6c\xa4\xfb\xdf\x00\x00\x00\xff\xff\x41\x67\x7f\x33\x9a\x09\x00\x00")

func contractsToken_testGoBytes() ([]byte, error) {
	return bindataRead(
		_contractsToken_testGo,
		"contracts/token_test.go",
	)
}

func contractsToken_testGo() (*asset, error) {
	bytes, err := contractsToken_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/token_test.go", size: 2458, mode: os.FileMode(420), modTime: time.Unix(1472428772, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\xc9\xcf\x4e\xcd\xb3\xe2\x52\x50\x88\xcf\x4b\xcc\x4d\xb5\x52\x00\xf3\x41\xdc\x92\xfc\x92\xc4\x9c\xe0\xd2\x82\x82\x9c\x4a\x2b\x05\x43\x03\x03\x90\x58\x71\x65\x6e\x52\x7e\x0e\x50\x91\xbf\x37\x88\x9b\x92\x9a\x9c\x99\x9b\x98\x53\x6c\xa5\x60\xc1\x05\x08\x00\x00\xff\xff\x28\xd7\x12\xbe\x48\x00\x00\x00")

func deployYmlBytes() ([]byte, error) {
	return bindataRead(
		_deployYml,
		"deploy.yml",
	)
}

func deployYml() (*asset, error) {
	bytes, err := deployYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy.yml", size: 72, mode: os.FileMode(420), modTime: time.Unix(1473106292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _librariesErc20tokenSol = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x55\xcd\x6b\xdb\x4e\x10\xbd\xfb\xaf\x98\x63\x1c\x82\x15\x0c\xbf\xdf\x21\xb9\x34\x94\x14\x7a\x6a\x69\x0d\x3d\xda\xab\xf5\x58\x5a\xba\xda\x15\xfb\x11\x35\x94\xfe\xef\x9d\xfd\xd0\x47\x24\x27\x2d\xa1\x3d\x34\x08\x62\x56\x33\x6f\xde\xbc\x37\x3b\x2a\x0a\xb8\x2b\xad\x33\x8c\x3b\xe0\x5a\xa5\x1f\x27\x6d\xc0\xd5\x08\x27\x2f\x25\xdc\x7f\x7a\x0b\xdb\x6b\xd8\xe9\xaf\xa8\xc0\x3a\xa6\x8e\xcc\x1c\x57\x94\x57\x3b\xd7\xda\x9b\xa2\xa8\x84\xab\x7d\xb9\xe1\xba\x29\x90\xb2\x0c\xfa\xa6\xb8\x7f\xff\xd1\x16\xc2\x5a\x8f\xb6\xd8\x5e\xaf\x56\x03\x34\xa1\x6d\xaf\x13\xd6\xf7\x15\xd0\x5f\x71\x09\xbb\x5a\x58\xa0\x87\x81\x95\xa2\xaa\x89\x48\xcd\x54\x85\xe0\x74\x64\x11\x53\xa0\x64\x16\x87\xf2\x9b\x98\x7a\xf2\x8a\x3b\xa1\x15\x05\x3a\x26\x3f\xfb\xb6\x95\x8f\x17\xeb\xd0\x46\x88\x73\x60\xd0\x79\xa3\x2c\x5c\x78\xa1\xdc\xf6\xbf\xff\xc1\xc6\x90\xf5\x6d\xcc\xa6\x82\x06\x5b\xc9\x38\x1e\xa1\xa3\x16\x6e\xe2\x69\x1f\xda\xfa\x52\x0a\x3e\x45\x4e\x59\x91\x2b\xf3\x4e\x37\xcc\x09\xce\xa4\x7c\x04\x6e\x90\x39\x0c\xf4\x2b\x74\x0e\xcd\xc8\xab\xd7\x71\x82\xb2\x19\x51\xe8\x69\xf4\x03\x55\xcf\x7d\xc6\x0e\x07\xa1\xac\x50\x1c\x7b\x1a\x33\x60\xaa\x65\x10\x94\x76\x11\x8c\x7b\x63\x50\x39\x62\x62\x90\xeb\x4a\x09\x4b\x98\x8c\x62\x14\x88\xa6\x95\xd8\xd0\x4b\x16\xf9\xe8\x53\x2c\x44\xd4\x79\x2d\x54\x05\x2c\x3b\xff\x54\xcd\xf2\x31\x46\x91\x9f\xad\x90\x68\x12\xe3\xcb\x22\xb9\x45\xbe\xc7\x6e\x80\x35\xda\x93\xc6\x01\x32\xb8\x69\x7f\xa9\xde\x90\xff\xa6\x65\x86\x35\xb0\xd7\x9d\xa2\x9e\x76\x54\x8a\x1d\x8f\x06\xad\x85\x93\xd1\x0d\x74\xb5\xe0\x75\x16\x44\xb2\x20\x42\x27\x68\x0c\x4b\x0c\x7e\x1a\x81\xa4\xd8\x08\x95\x2c\x8e\x20\x39\x7a\xd6\x4b\x3a\xfc\x70\xba\xe8\x6b\xa4\xb2\x2f\x4d\x49\xce\x59\x4f\x29\x93\xd6\x82\x98\x58\x54\x47\x38\xec\x1f\x98\xf4\x78\x48\x8d\x07\xf7\x0e\x7b\xa7\x0f\x89\xfd\xa1\xb1\xd5\x26\x84\xa1\x39\x2c\x3a\xa6\xd0\x69\xbb\xd9\x0e\x72\x4d\xb4\x82\x4c\x5a\xc4\xc7\x3a\x29\xe5\xa9\xda\xa1\x28\x09\x42\xe6\x29\x7b\x42\xb2\x7f\x29\xc9\x97\x3a\x5e\xc6\x34\x7f\x39\x0e\x3a\x1a\x0b\xeb\x39\xa7\xea\x74\xb7\x81\xc6\xb3\x1f\xa2\xf1\x2e\xe5\xd8\x51\x30\xa7\xaf\x06\x63\x13\xa5\xf5\x28\x5a\xa9\xb5\xec\x21\x5f\xa9\xd8\x3e\xfc\x3b\x40\xa8\x1d\xc7\x4e\x1d\x45\x64\x22\x5c\x5c\x0a\x6d\x6b\xe2\x2d\xa1\xb1\xcc\xa1\x0b\x9d\x22\xce\x19\x65\x93\x0f\xff\xb4\x0d\xef\xa8\xb5\xd1\x8a\xd0\xe8\x15\xfc\x19\x67\xa6\x93\xda\xab\x6c\x49\xe2\x80\x1e\x9c\x02\xdb\x2e\xbd\xb3\x0b\x71\x62\xd4\xec\x1e\x67\x45\x19\xe7\x51\x2e\x56\xca\xb4\xcc\xfb\xfe\xd3\x4e\x3c\x0b\x77\x4e\xeb\x0e\x45\x56\x7a\x18\x86\xb8\x59\x33\xdc\x8b\x9a\xa7\x0c\xda\x57\xbf\xa1\x79\x46\x1f\xe5\xce\xbd\xbd\x46\xe4\x67\x77\xdc\x4c\x1b\x0a\x08\x9b\xf8\x2f\x8b\x9b\x85\xb9\x1b\x24\x35\xd8\x30\x31\xa9\x0c\xf4\x25\xd3\x5d\xfa\x16\x85\xa2\x73\x65\xc2\xdb\xb0\x14\x67\x6b\x74\x32\x8b\x99\xea\x4b\x8b\x75\x28\xda\x2b\x45\xbb\x9c\xe2\x76\xf3\x8d\x23\x08\xe8\x1b\x71\x99\x8d\xfb\x70\x7c\x66\xec\x6f\x27\x78\x77\xd9\xf2\x25\xde\x8c\xf3\x70\xfe\x9c\xcf\xb7\xab\x1f\xab\x9f\x01\x00\x00\xff\xff\x1a\x02\xa5\x30\x21\x09\x00\x00")

func librariesErc20tokenSolBytes() ([]byte, error) {
	return bindataRead(
		_librariesErc20tokenSol,
		"libraries/ERC20Token.sol",
	)
}

func librariesErc20tokenSol() (*asset, error) {
	bytes, err := librariesErc20tokenSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libraries/ERC20Token.sol", size: 2337, mode: os.FileMode(420), modTime: time.Unix(1473106292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/Token.sol": contractsTokenSol,
	"contracts/token.go": contractsTokenGo,
	"contracts/token_test.go": contractsToken_testGo,
	"deploy.yml": deployYml,
	"libraries/ERC20Token.sol": librariesErc20tokenSol,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": &bintree{nil, map[string]*bintree{
		"Token.sol": &bintree{contractsTokenSol, map[string]*bintree{}},
		"token.go": &bintree{contractsTokenGo, map[string]*bintree{}},
		"token_test.go": &bintree{contractsToken_testGo, map[string]*bintree{}},
	}},
	"deploy.yml": &bintree{deployYml, map[string]*bintree{}},
	"libraries": &bintree{nil, map[string]*bintree{
		"ERC20Token.sol": &bintree{librariesErc20tokenSol, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

